@page
@model CGI_Project_WebApp.Pages.PhotoAlbum.AddPhotoModel
@{
    ViewData["Title"] = @stringLocalizer["AddPhotoNav"];
}
@using Microsoft.AspNetCore.Mvc.Localization;
@using Microsoft.Extensions.Localization;
@inject IStringLocalizer<IndexModel> stringLocalizer;

<head>
    <link rel="stylesheet" href="~/css/addphoto.css" />
</head>

<div class="container my-5">
    <!-- Existing code... -->
    @if (TempData["Success"] != null)
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
            <div id="successToast" class="toast show bg-success d-flex" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true">
                <div class="toast-body text-light">
                    @stringLocalizer[@TempData["Success"].ToString()]
                </div>
            </div>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
            <div id="errorToast" class="toast show bg-danger d-flex" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true">
                <div class="toast-body text-light">
                    @stringLocalizer[@TempData["Error"].ToString()]
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-md-6 offset-md-3">
            <form method="post" asp-page-handler="TryAddPhoto" enctype="multipart/form-data">
                <div class="preview-div mb-3 w-75 mx-auto hidden">
                    <div id="imagePreviewContainer" class="text-center">
                        <img id="imagePreview" class="img-thumbnail" alt="Image Preview">
                    </div>
                </div>
                <div class="mb-3">
                    <label for="uploadLabel" class="form-label">@stringLocalizer["PhotoFormLabel1"]</label>
                    <input class="form-control" type="file" id="upload" asp-for="Upload" onchange="previewImage()" style="display: none;" />
                    <div class="dropzone" id="dropzone" ondragover="handleDragOver(event)" ondrop="handleDrop(event)">
                        <label for="uploadLabel" class="dropzone-label">@stringLocalizer["PhotoFormLabel2"]</label>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">@stringLocalizer["PhotoFormDesc"]</label>
                    <input class="form-control m-0" required type="text" id="description" asp-for="@Model.photo.Description">
                </div>
                @if (HttpContext.Session.GetInt32("ActivityButton") != 0)
                {
                    <div class="text-center my-5">
                        <button type="submit" class="btn btn-lg btn-add-photo">
                            @stringLocalizer["PhotoFormAdd"]
                        </button>
                    </div>
                }
            </form>
        </div>
    </div>
</div>

<script>

    document.addEventListener('DOMContentLoaded', function () {

        document.querySelector('.dropzone').addEventListener('click', function () {
            console.log('hit');
            document.getElementById('upload').click();
        });

        var toastElList = [].slice.call(document.querySelectorAll('.toast'));
        var toastList = toastElList.map(function (toastEl) {
            return new bootstrap.Toast(toastEl);
        });

        // Optional: Close the toasts after a certain duration
        setTimeout(function () {
            toastList.forEach(function (toast) {
                toast.hide();
            });

            // Ensure the toasts are not reappearing by removing them from the DOM
            toastElList.forEach(function (toastEl) {
                toastEl.parentNode.removeChild(toastEl);
            });
        }, 5000);

        var submitButton = document.getElementById('submitButton');

        if (submitButton) {
            submitButton.addEventListener('click', function () {
                this.disabled = true; // Disable the button
            });
        }
    });

    function previewImage() {
        var input = document.getElementById('upload');
        var imagePreview = document.getElementById('imagePreview');

        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                imagePreview.src = e.target.result;
            };

            reader.readAsDataURL(input.files[0]);
            document.getElementById('imagePreviewContainer').style.display = 'block';
            document.querySelector(".preview-div").classList.remove("hidden");
        } else {
            document.getElementById('imagePreviewContainer').style.display = 'none';
        }
    }

    function handleDragOver(event) {
        event.preventDefault();
        var dropzone = document.getElementById('dropzone');
        dropzone.classList.add('drag-over');
    }

    function handleDrop(event) {
        event.preventDefault();
        var dropzone = document.getElementById('dropzone');
        dropzone.classList.remove('drag-over');

        var files = event.dataTransfer.files;
        var input = document.getElementById('upload');

        if (files.length > 0) {
            input.files = files;
            previewImage();
        }
    }

    document.getElementById("suggestionForm").addEventListener("submit", function () {
        // Reset the form after submission
        this.reset();

        // Hide the button again after form submission
        if (submitButtonContainer) {
            submitButtonContainer.style.display = 'none';
        }

        // Set a timeout to show the button after a second
        setTimeout(showButtonAfterDelay, 1000);
    });


</script>

