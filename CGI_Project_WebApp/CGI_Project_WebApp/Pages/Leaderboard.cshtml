@page
@model CGI_Project_WebApp.Pages.LeaderboardModel
@using Microsoft.AspNetCore.Mvc.Localization;
@using Microsoft.Extensions.Localization;
@inject IStringLocalizer<IndexModel> stringLocalizer;
@{
    ViewData["Title"] = @stringLocalizer["LeaderboardTitle"];

    // Define the maximum height for the bar charts
    var maxHeight = 300;

    // Define colors for the top three bars
    string[] barColors = new string[] { "bar-two", "bar-one", "bar-three" };

    // Adjusted order for the bar display
    int[] order = new int[] { 1, 0, 2 };

    // Handle case where there are fewer than 3 top entries
    if (Model.TopThree != null)
    {
        while (Model.TopThree.Count < 3)
        {
            Model.TopThree.Add((Name: "", Score: 0, ProfileImage: ""));
        }
    }

    bool isDataAvailable = (Model.TopThree != null && Model.TopThree.Any())
                           || (Model.PlacesFourToTen != null && Model.PlacesFourToTen.Any());
}
@functions {

    private Dictionary<int, int> GetDenseRank(List<(string Name, int Score, string ProfileImage)> scores)
    {
        var ranks = new Dictionary<int, int>();
        int rank = 1;
        int prevScore = int.MinValue;
        foreach (var score in scores.OrderByDescending(s => s.Score))
        {
            if (score.Score != prevScore)
            {
                prevScore = score.Score;
                if (!ranks.ContainsKey(score.Score))
                {
                    ranks.Add(score.Score, rank);
                }
                rank++;
            }
            else if (!ranks.ContainsKey(score.Score))
            {
                ranks.Add(score.Score, rank);
            }
        }
        return ranks;
    }
}

@{
    // Calculate the dense rankings for all scores
    List<(string Name, int Score, string ProfileImage)> allScores = (Model.TopThree != null && Model.PlacesFourToTen != null)
        ? Model.TopThree.Concat(Model.PlacesFourToTen.Select(x => (x.Name, x.Score, x.ProfileImage))).ToList()
        : new List<(string Name, int Score, string ProfileImage)>();
    Dictionary<int, int> denseRanks = GetDenseRank(allScores);
}

<!DOCTYPE html>
<html>
<head>
    <title>Leaderboard</title>
    <link rel="stylesheet" href="~/css/leaderboard.css" />
</head>
<body>
    <div class="container mt-5 mb-5">
        <div class="row">
            <div class="col-md-10 offset-md-1">
                <h3 class="hero-title ml-3">@stringLocalizer["LeaderboardTitle"]</h3>

                @if (isDataAvailable)
                {
                    <div class="row mt-4">
                        @foreach (var index in order)
                        {
                            if (Model.TopThree != null && index < Model.TopThree.Count && index < barColors.Length)
                            {
                                var entry = Model.TopThree.ElementAtOrDefault(index);
                                var scorePercentage = Model.MaxScore > 0 ? Math.Round(((double)entry.Score / Model.MaxScore) * 100) : 0;
                                var barHeight = scorePercentage * (maxHeight / 100);
                                var thresholdHeight = 13;

                                <div class="col-md-4 mb-2">
                                    <div class="displayUserName text-center chart-name">@entry.Name</div>
                                    <div class="bar-container d-flex flex-column-reverse position-relative" style="height: @(maxHeight)px;">
                                        <div class="progress @barColors[index]" style="height: @(barHeight)px; width: 100%;">
                                            <div class="progress-bar" style="width: 100%"></div>
                                        </div>
                                        @if (barHeight <= thresholdHeight)
                                        {
                                            <div class="score-above-bar">#@denseRanks[entry.Score] <br>@entry.Score</div>
                                        }
                                        else
                                        {
                                            <div class="score-overlay d-flex align-items-center justify-content-center" style="height: @(barHeight)px;">
                                                #@denseRanks[entry.Score] <br>@entry.Score <br>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>

                    <table class="table mt-4">
                        <thead>
                            <tr>
                                <th>@stringLocalizer["LeaderboardPosition"]</th>
                                <th>@stringLocalizer["LeaderboardName"]</th>
                                <th>@stringLocalizer["LeaderboardScore"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var entry in Model.PlacesFourToTen)
                            {
                                <tr>
                                    <td>#@denseRanks[entry.Score]</td>
                                    <td><div class="displayUserName">@entry.Name</div></td>
                                    <td>@entry.Score</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="text-center">
                        <p>There is no information to be shown at this time.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</body>
</html>
