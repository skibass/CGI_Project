@page
@model CGI_Project_WebApp.Pages.LeaderboardModel
@{
    ViewData["Title"] = "Leaderboard";

    // Define the maximum height for the bar charts
    var maxHeight = 300;

    // Define colors for the top three bars
    string[] barColors = new string[] { "bar-two", "bar-one", "bar-three" };

    // Adjusted order for the bar display
    int[] order = new int[] { 1, 0, 2 };


    // Handle case where there are fewer than 3 top entries
    while (Model.TopThree.Count < 3)
    {
        Model.TopThree.Add((Name: "", Score: 0));
    }
}
@functions {
    private Dictionary<int, int> GetDenseRank(List<(string Name, int Score)> scores)
    {
        var ranks = new Dictionary<int, int>();
        int rank = 1;
        int prevScore = int.MinValue;
        foreach (var score in scores.OrderByDescending(s => s.Score))
        {
            if (score.Score != prevScore)
            {
                prevScore = score.Score;
                if (!ranks.ContainsKey(score.Score))
                {
                    ranks.Add(score.Score, rank);
                }
                rank++; 
            }
            else if (!ranks.ContainsKey(score.Score))
            {
                ranks.Add(score.Score, rank); 
            }
        }
        return ranks;
    }

    private string GetOrdinal(int number)
    {
        if (number <= 0) return number.ToString();

        switch (number % 100)
        {
            case 11:
            case 12:
            case 13:
                return number + "th";
        }

        switch (number % 10)
        {
            case 1:
                return number + "st";
            case 2:
                return number + "nd";
            case 3:
                return number + "rd";
            default:
                return number + "th";
        }
    }
}

@{
    // Calculate the dense rankings for all scores
    var allScores = Model.TopThree.Concat(Model.PlacesFourToTen.Select(x => (x.Name, x.Score))).ToList();
    var denseRanks = GetDenseRank(allScores);
}

<!DOCTYPE html>
<html>
<head>
    <title>Leaderboard</title>
    <link rel="stylesheet" href="~/css/leaderboard.css" />

</head>
<body>

    <!-- Container for the leaderboard content -->
    <div class="container mt-5 mb-5">

        <!-- Center the leaderboard content on the page -->
        <div class="row">
            <div class="col-md-10 offset-md-1">

                <!-- Display the page title -->
                <h3 class="hero-title ml-3">Leaderboard</h3>

                <!-- Create bar charts for the top three entries -->
                <div class="row mt-4">
                    
                    @foreach (var index in order)
                    {
                        var entry = Model.TopThree.ElementAtOrDefault(index);
                        var scorePercentage = Model.MaxScore > 0 ? Math.Round(((double)entry.Score / Model.MaxScore) * 100) : 0;
                        var barHeight = scorePercentage * (maxHeight / 100); // maxHeight is the maximum pixel height for the bar
                        var thresholdHeight = 13; // Minimum height to display score inside the bar

                        <div class="col-md-4 mb-2">
                            <!-- Display the name of the current entry -->
                            <div class="displayUserName text-center chart-name">@entry.Name</div>

                            <!-- Container for the bar chart -->
                            <div class="bar-container d-flex flex-column-reverse position-relative" style="height: @(maxHeight)px;">
                                <div class="progress @barColors[index]" style="height: @(barHeight)px; width: 100%;">
                                    <div class="progress-bar" style="width: 100%"></div>
                                </div>

                                <!-- Decide where to display the score based on the bar height -->
                                @if (barHeight <= thresholdHeight)
                                {
                                    <!-- Display score above the bar if it's too short -->
                                    <div class="score-above-bar">@entry.Score <br>@GetOrdinal(denseRanks[entry.Score])</div>
                                }
                                else
                                {
                                    <!-- Display score inside the bar if it's tall enough -->
                                    <div class="score-overlay d-flex align-items-center justify-content-center" style="height: @(barHeight)px;">
                                        @entry.Score <br>@GetOrdinal(denseRanks[entry.Score])
                                    </div>
                                }
                            </div>
                        </div>
                    }


                </div>

                <!-- Display scores for positions 4-10 in a table -->
                <table class="table mt-4">
                    <thead>
                        <tr>
                            <th>Position</th>
                            <th>Name</th>
                            <th>Score</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var entry in Model.PlacesFourToTen)
                        {
                            <tr>
                                <!-- Use the denseRanks dictionary to display the position -->
                                <td>@GetOrdinal(denseRanks[entry.Score])</td>
                                <td>
                                    <div class="displayUserName">
                                        @entry.Name
                                    </div>
                                </td>
                                <td>@entry.Score</td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        </div>
    </div>

</body>
</html>
