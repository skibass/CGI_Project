@page
@using Microsoft.AspNetCore.Mvc.Localization;
@using Microsoft.Extensions.Localization;
@model CGI_Project_WebApp.Pages.Excursions.PollModel
@inject IStringLocalizer<IndexModel> stringLocalizer;
@{
    ViewData["Title"] = @stringLocalizer["PollTitle"];
}

<!-- Include the Flatpickr library -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr@4.6.3/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr@4.6.3/dist/flatpickr.min.js"></script>

<div class="backgroundbar"></div>

<div class="hero container">
    <div class="container">
        <h3 class="hero-title mt-5">@stringLocalizer["PollTitle"]</h3>
        <h5 class="subtitle">@stringLocalizer["SuggestSubtitle"]</h5>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
        <div id="successToast" class="toast show bg-success d-flex" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true">
            <div class="toast-body text-light">
                @stringLocalizer[@TempData["Success"].ToString()]
            </div>
        </div>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
        <div id="errorToast" class="toast show bg-danger d-flex" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true">
            <div class="toast-body text-light">
                @stringLocalizer[@TempData["Error"].ToString()]
            </div>
        </div>
    </div>
}

<div class="container mb-5">
    <form method="post" enctype="multipart/form-data">
        <input asp-for="Poll.Poll_name" type="text" id="pname" placeholder="@stringLocalizer["PollName"]..." /><br />
        <input type="text" id="dateRange" placeholder="@stringLocalizer["PollRange"]..." data-mode="range" data-input><br />

        <input asp-for="Poll.StartTime" type="hidden" id="startDate" />
        <input asp-for="Poll.EndTime" type="hidden" id="endDate" />

        @if (Model?.UnusedSuggestionsList?.suggestions != null)
        {
            <select id="chosenSuggestions" style="width: 30rem; margin-left: 1rem" class="form-control form-control-lg mt-2" asp-for="chosenSuggestions" asp-items="@(new SelectList(Model.unusedSuggestionsList.suggestions, "Id", "Name"))" required multiple="multiple">
                <option value="" selected disabled>---@stringLocalizer["SelectPollSuggestion"]---</option>
            </select>
            <br />
        }
        else
        {
            <span class="">@stringLocalizer["PollNoSuggestions"]</span>
            <br />
        }

        <button class="btn btn-primary border-0 text-white fs-6 fw-bold hero-button mt-4 ms-3" type="submit">@stringLocalizer["SuggestSubmit"]</button>
    </form>
</div>

<script type="text/javascript">
    var maxExcursionsAlert = "@stringLocalizer["PollAlert"]";
</script>

<script>
    flatpickr("#dateRange", {
        mode: "range",
        dateFormat: "M-d-y",
        minDate: "today",
        onClose: function (selectedDates, dateStr, instance) {
            // Handle date selections
            if (selectedDates.length === 2) {
                var startDate = selectedDates[0].toISOString().split('T')[0];
                var endDate = selectedDates[1].toISOString().split('T')[0];

                // Set the selected dates in hidden input fields
                document.getElementById("startDate").value = startDate;
                document.getElementById("endDate").value = endDate;
            }
        }
    });
    
    document.addEventListener('DOMContentLoaded', function () {
        var toastElList = [].slice.call(document.querySelectorAll('.toast'));
        var toastList = toastElList.map(function (toastEl) {
            return new bootstrap.Toast(toastEl);
        });

        // Optional: Close the toasts after a certain duration
        setTimeout(function () {
            toastList.forEach(function (toast) {
                toast.hide();
            });

            // Ensure the toasts are not reappearing by removing them from the DOM
            toastElList.forEach(function (toastEl) {
                toastEl.parentNode.removeChild(toastEl);
            });
        }, 5000); // 1000 milliseconds = 1 second
    });
</script>

<script>
    document.getElementById('chosenSuggestions').addEventListener('change', function () {
        var selectedOptions = this.selectedOptions;
        if (selectedOptions.length > 3) {
            alert(maxExcursionsAlert);

            for (let i = 3; i < selectedOptions.length; i++) {
                selectedOptions[i].selected = false;
                i--;
            }

        }
    });

    function message() {
        if (@((Model.ErrorMessage != null).ToString().ToLower())) {
            alert("@Model.ErrorMessage");
        }
    }
    message();

</script>