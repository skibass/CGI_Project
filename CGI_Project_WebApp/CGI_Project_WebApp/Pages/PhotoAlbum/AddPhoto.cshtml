@page
@model CGI_Project_WebApp.Pages.PhotoAlbum.AddPhotoModel
@{
}

@if (Model.Error.MessageBool)
{
    @if (!string.IsNullOrEmpty(Model.Error.SuccessMessage))
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
            <div id="successToast" class="toast show bg-success d-flex" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true">
                <div class="toast-body text-light">
                    @Model.Error.SuccessMessage
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.Error.ErrorMessage))
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
            <div id="errorToast" class="toast show bg-danger d-flex" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true">
                <div class="toast-body text-light">
                    @Model.Error.ErrorMessage
                </div>
            </div>
        </div>
    }
}
<br />
<br />
<br />
<br />
<form method="post" asp-page-handler="TryAddPhoto" enctype="multipart/form-data">
    <div class="form-outline mb-4">
        <input class="form-control form-control-lg" required type="file" asp-for="Upload">
        <label class="form-label">Select photo</label>
    </div>
    <div class="form-outline mb-4">
        <input class="form-control form-control-lg" required type="text" asp-for="@Model.photo.Description">
        <label class="form-label">Add a description</label>
    </div>
    @if (HttpContext.Session.GetInt32("ActivityButton") == null)
    {
        <div class="d-flex justify-content-center">
            <button type="submit"
                    class="btn btn-success btn-block btn-lg gradient-custom-4 text-body">
                Add photo to album
            </button>
        </div>
    }
</form>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var toastElList = [].slice.call(document.querySelectorAll('.toast'));
        var toastList = toastElList.map(function (toastEl) {
            return new bootstrap.Toast(toastEl);
        });

        // Optional: Close the toasts after a certain duration
        setTimeout(function () {
            toastList.forEach(function (toast) {
                toast.hide();
            });

            // Ensure the toasts are not reappearing by removing them from the DOM
            toastElList.forEach(function (toastEl) {
                toastEl.parentNode.removeChild(toastEl);
            });
        }, 5000);
    });
    </script>